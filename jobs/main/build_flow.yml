<%include file="trigger_defaults.yml"/>
<%include file="default.yml"/>

job_description: Orchestrates the entire process of creating a snapshot artifact and updating internal master.
artifactNumToKeep: 10
numOfJobsToKeep: 10
daysToKeep: 10
buildParams:
  - paramName: PublicRepo
    paramValue: "https://github.com/Rax-io-CI-CD/workshop_demo"
    paramDesc:  Public repository (Openstack)
    paramType: string
  - paramName: PublicRepoBranch
    paramValue: "master"
    paramDesc:  "Public repository branch (Openstack/master)"
    paramType: string  
  - paramName: PrivateRepo
    paramValue: "git@github.com:dimtruck/workshop_demo.git"
    paramDesc:  Private repository (Solum specific)
    paramType: string
  - paramName: PrivateRepoBranch
    paramValue: "upstream"
    paramDesc:  "Private repository branch to push to (Solum specific)"
    paramType: string
  - paramName: MergeRepo
    paramValue: "https://github.com/dimtruck/workshop_build"
    paramDesc:  "Repository that contains a list of downstream patches"
    paramType: string
  - paramName: MergeRepoBranch
    paramValue: "master"
    paramDesc:  "Repository branch that contains a list of downstream patches"
    paramType: string
  - paramName: Milestone
    paramValue: "k1"
    paramDesc:  "Upstream release milestone (eg. j1 for milestone juno 1). (Openstack)"
    paramType: string
  - paramName: OpenstackVersion
    paramValue: "2015"
    paramDesc:  "Openstack or Stackforge version (eg. 2015). (Openstack)"
    paramType: string
scm:
  gitURL: "<%text>${MergeRepo}</%text>"
  gitBranch: "<%text>${MergeRepoBranch}</%text>"
  extensions: 
    branch: "<%text>${MergeRepoBranch}</%text>"
    cleanbeforecheckout: True
triggers: 
  timer: "@midnight"
dsl: |
     <%text>
     pull_from_upstream = build(params, "main_public_upstream_merge")
     private_build = build(params, "main_build")
     branch = private_build.environment.get("BUILD_NAME")
     sha1 = private_build.environment.get("SHA1")
     
     guard {
       unit_tests = build("main_unit_tests", BranchName: branch, PrivateRepo: params.get("PrivateRepo"))
       ignore(FAILURE) {
         build("main_security_tests", BranchName: branch, PrivateRepo: params.get("PrivateRepo"))
       }
       parallel ([
         functional_tests:  { 
           retry ( 3 ) {
             build("main_functional_tests", BranchName: branch, PrivateRepo: params.get("PrivateRepo"))
           }
         },
         performance_tests_1:  { 
           retry ( 3 ) {
             build("main_performance_tests", BranchName: branch, PrivateRepo: params.get("PrivateRepo"))
           }
         }
       ])
       parallel (
         { build("main_snapshot_deployer", BranchName: branch, PrivateRepo: params.get("PrivateRepo")) },
         { build("main_sonar", sha1: sha1, BranchName: branch, PrivateRepo: params.get("PrivateRepo")) }
       )
       parallel (
         { build("main_test_deployer", sha1: sha1, BranchName: branch) },
         { build("main_security_deployer", sha1: sha1, BranchName: branch) }
       )
     } rescue {
       build( "main_cleanup", sha1: sha1, BranchName: branch )
     }
     </%text>